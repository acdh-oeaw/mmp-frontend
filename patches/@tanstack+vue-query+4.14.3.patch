diff --git a/node_modules/@tanstack/vue-query/build/lib/useQueries.d.ts b/node_modules/@tanstack/vue-query/build/lib/useQueries.d.ts
index b5b519b..73296c1 100644
--- a/node_modules/@tanstack/vue-query/build/lib/useQueries.d.ts
+++ b/node_modules/@tanstack/vue-query/build/lib/useQueries.d.ts
@@ -45,5 +45,5 @@ export declare type UseQueriesResults<T extends any[], Result extends any[] = []
 declare type UseQueriesOptionsArg<T extends any[]> = readonly [...UseQueriesOptions<T>];
 export declare function useQueries<T extends any[]>({ queries, }: {
     queries: Ref<UseQueriesOptionsArg<T>> | UseQueriesOptionsArg<T>;
-}): Readonly<UseQueriesResults<T>>;
+}): Readonly<Ref<UseQueriesResults<T>>>;
 export {};
diff --git a/node_modules/@tanstack/vue-query/build/lib/useQueries.esm.js b/node_modules/@tanstack/vue-query/build/lib/useQueries.esm.js
index 1f46ad7..36e1bac 100644
--- a/node_modules/@tanstack/vue-query/build/lib/useQueries.esm.js
+++ b/node_modules/@tanstack/vue-query/build/lib/useQueries.esm.js
@@ -1,5 +1,5 @@
 import { QueriesObserver } from '@tanstack/query-core';
-import { reactive, watch, onScopeDispose, readonly } from 'vue-demi';
+import { ref, watch, onScopeDispose, readonly } from 'vue-demi';
 import { useQueryClient } from './useQueryClient.esm.js';
 import { cloneDeepUnref } from './utils.esm.js';
 
@@ -16,9 +16,9 @@ function useQueries({
     return queryClient.defaultQueryOptions(options);
   });
   const observer = new QueriesObserver(queryClient, defaultedQueries);
-  const state = reactive(observer.getCurrentResult());
+  const state = ref(observer.getCurrentResult());
   const unsubscribe = observer.subscribe(result => {
-    state.splice(0, state.length, ...result);
+    state.value.splice(0, state.value.length, ...result);
   });
   watch(() => queries, () => {
     const defaulted = cloneDeepUnref(queries).map(options => {
diff --git a/node_modules/@tanstack/vue-query/build/lib/useQueries.js b/node_modules/@tanstack/vue-query/build/lib/useQueries.js
index 5863693..fd00bee 100644
--- a/node_modules/@tanstack/vue-query/build/lib/useQueries.js
+++ b/node_modules/@tanstack/vue-query/build/lib/useQueries.js
@@ -20,9 +20,9 @@ function useQueries({
     return queryClient.defaultQueryOptions(options);
   });
   const observer = new queryCore.QueriesObserver(queryClient, defaultedQueries);
-  const state = vueDemi.reactive(observer.getCurrentResult());
+  const state = vueDemi.ref(observer.getCurrentResult());
   const unsubscribe = observer.subscribe(result => {
-    state.splice(0, state.length, ...result);
+    state.value.splice(0, state.value.length, ...result);
   });
   vueDemi.watch(() => queries, () => {
     const defaulted = utils.cloneDeepUnref(queries).map(options => {
diff --git a/node_modules/@tanstack/vue-query/build/lib/useQueries.mjs b/node_modules/@tanstack/vue-query/build/lib/useQueries.mjs
index 25be232..18c9578 100644
--- a/node_modules/@tanstack/vue-query/build/lib/useQueries.mjs
+++ b/node_modules/@tanstack/vue-query/build/lib/useQueries.mjs
@@ -1,5 +1,5 @@
 import { QueriesObserver } from '@tanstack/query-core';
-import { reactive, watch, onScopeDispose, readonly } from 'vue-demi';
+import { ref, watch, onScopeDispose, readonly } from 'vue-demi';
 import { useQueryClient } from './useQueryClient.mjs';
 import { cloneDeepUnref } from './utils.mjs';
 
@@ -16,9 +16,9 @@ function useQueries({
     return queryClient.defaultQueryOptions(options);
   });
   const observer = new QueriesObserver(queryClient, defaultedQueries);
-  const state = reactive(observer.getCurrentResult());
+  const state = ref(observer.getCurrentResult());
   const unsubscribe = observer.subscribe(result => {
-    state.splice(0, state.length, ...result);
+    state.value.splice(0, state.value.length, ...result);
   });
   watch(() => queries, () => {
     const defaulted = cloneDeepUnref(queries).map(options => {
